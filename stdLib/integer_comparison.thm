
Kind $lib__nat   type.
Import "integer_multiplication".



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                LESS                                %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Define $less_integer : $lib__integer -> $lib__integer -> prop by
  $less_integer ($posInt $zero) ($posInt ($succ N2));
  $less_integer ($posInt ($succ N1)) ($posInt ($succ N2)) :=
     $less_integer ($posInt N1) ($posInt N2);
  %
  $less_integer ($negSuccInt N1) ($posInt N2);
  %
  $less_integer ($negSuccInt ($succ N1)) ($negSuccInt $zero);
  $less_integer ($negSuccInt ($succ N1)) ($negSuccInt ($succ N2)) :=
     $less_integer ($negSuccInt N1) ($negSuccInt N2).

Theorem $less_integer_negSuccInt_left_step : forall A B,
  $less_integer ($negSuccInt A) B ->
  $less_integer ($negSuccInt ($succ A)) B.
induction on 1. intros L. case L (keep). search. search.
 apply IH to H1. search.

Theorem $less_integer_add_1_neg_left : forall N,
  $is_nat N ->
  $less_integer ($negSuccInt ($succ N)) ($negSuccInt N).
induction on 1. intros IsN. IsN: case IsN.
  %Subgoal 1
   search.
  %Subgoal 2
   apply IH to IsN. search.

Theorem $less_integer_drop_succ_pos_left : forall A B,
  $less_integer ($posInt ($succ A)) B ->
  $less_integer ($posInt A) B.
induction on 1. intros L. L: case L. L': case L (keep).
  %Subgoal 1
   search.
  %Subgoal 2
   apply IH to L. search.

Theorem $less_integer_posInt : forall M N,
  $less_integer ($posInt M) N ->
  exists N', N = $posInt N'.
intros L. case L.
  %Subgoal 1
   search.
  %Subgoal 2
   search.

Theorem $less_integer_negSuccInt_is_nat : forall N1 N2,
  $less_integer N1 ($negSuccInt N2) -> $is_nat N2.
induction on 1. intros L. L: case L.
  %Subgoal 1
   search.
  %Subgoal 2
   apply IH to L. search.

Theorem extensibella-$-stdLib-$-less_integer_transitive :
  forall A B C,
    $less_integer A B -> $less_integer B C -> $less_integer A C.
induction on 2. intros LAB LBC. LBC: case LBC.
  %Subgoal 1
   case LAB. search.
  %Subgoal 2
   LAB': case LAB (keep).
     %Subgoal 2.1
      search.
     %Subgoal 2.2
      apply IH to LAB' LBC. search.
     %Subgoal 2.3
      search.
  %Subgoal 3
   case LAB.
     %Subgoal 3.1
      search.
     %Subgoal 3.2
      search.
  %Subgoal 4
   case LAB. search.
  %Subgoal 5
   LAB': case LAB. apply IH to LAB' LBC. search.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                               LESSEQ                               %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Define $lesseq_integer : $lib__integer -> $lib__integer -> prop by
  $lesseq_integer ($posInt $zero) ($posInt $zero);
  $lesseq_integer ($posInt $zero) ($posInt ($succ N2));
  $lesseq_integer ($posInt ($succ N1)) ($posInt ($succ N2)) :=
     $lesseq_integer ($posInt N1) ($posInt N2);
  %
  $lesseq_integer ($negSuccInt N1) ($posInt N2);
  %
  $lesseq_integer ($negSuccInt $zero) ($negSuccInt $zero);
  $lesseq_integer ($negSuccInt ($succ N1)) ($negSuccInt $zero);
  $lesseq_integer ($negSuccInt ($succ N1)) ($negSuccInt ($succ N2)) :=
     $lesseq_integer ($negSuccInt N1) ($negSuccInt N2).

Theorem $lesseq_integer_posInt : forall M N,
  $lesseq_integer ($posInt M) N ->
  exists N', N = $posInt N'.
intros LEq. case LEq (keep). search. search. search.

Theorem $lesseq_negSuccInt_left_step : forall A B,
  $lesseq_integer ($negSuccInt A) B ->
  $lesseq_integer ($negSuccInt ($succ A)) B.
induction on 1. intros L. L: case L.
  %Subgoal 1
   search.
  %Subgoal 2
   search.
  %Subgoal 3
   search.
  %Subgoal 4
   apply IH to L. search.

Theorem extensibella-$-stdLib-$-lesseq_integer_less_or_eq :
  forall A B,
    $lesseq_integer A B -> $less_integer A B \/ A = B.
induction on 1. intros L. L: case L.
  %Subgoal 1
   search.
  %Subgoal 2
   search.
  %Subgoal 3
   Or: apply IH to L. case Or. search. search.
  %Subgoal 4
   search.
  %Subgoal 5
   search.
  %Subgoal 6
   search.
  %Subgoal 7
   Or: apply IH to L. case Or. search. search.

Theorem extensibella-$-stdLib-$-less_integer_lesseq : forall A B,
  $less_integer A B -> $lesseq_integer A B.
induction on 1. intros L. L: case L.
  %Subgoal 1
   search.
  %Subgoal 2
   apply IH to L. search.
  %Subgoal 3
   search.
  %Subgoal 4
   search.
  %Subgoal 5
   apply IH to L. search.

Theorem extensibella-$-stdLib-$-is_integer_lesseq : forall A,
  is_integer A -> $lesseq_integer A A.
 induction on 1. intros IsA. Is: case IsA.
  %Subgoal 1
   search.
  %Subgoal 2
   apply IH to Is. search.
  %Subgoal 3
   search.
  %Subgoal 4
   apply IH to Is. search.

Theorem extensibella-$-stdLib-$-lesseq_integer_transitive :
  forall A B C,
    $lesseq_integer A B -> $lesseq_integer B C -> $lesseq_integer A C.
induction on 2. intros LAB LBC. LBC': case LBC.
  %Subgoal 1
   search.
  %Subgoal 2
   case LAB. search. search.
  %Subgoal 3
   LAB': case LAB.
     %Subgoal 3.1
      search.
     %Subgoal 3.2
      apply IH to LAB' LBC'. search.
     %Subgoal 3.3
      search.
  %Subgoal 4
   case LAB. search. search. search.
  %Subgoal 5
   search.
  %Subgoal 6
   case LAB. search.
  %Subgoal 7
   LAB': case LAB. apply IH to LAB' LBC'. search.

Theorem extensibella-$-stdLib-$-less_integer__add_positive :
  forall N1 N2 Base Sum,
    $less_integer Base N1 ->
    $lesseq_integer ($posInt $zero) N2 ->
    $plus_integer N1 N2 Sum -> $less_integer Base Sum.
induction on 1. intros L1 L2 Plus.
apply $lesseq_integer_posInt to L2. case L1 (keep).
  %Subgoal 1:  0 < N2
   case Plus. search.
  %Subgoal 2:  0 < N3 + 1
   case Plus. apply IH to H1 L2 H2. search.
  %Subgoal 3:  negSuccInt N3 < posInt N4
   case Plus. search. search.
  %Subgoal 4:  negSuccInt (succ N3) < -1
   case Plus. search. search.
  %Subgoal 5
   case Plus. search.
   LEq: assert $lesseq_integer ($posInt $zero) ($posInt N6).
           case H2. search. search. search.
   apply IH to H1 LEq H2. backchain $less_integer_negSuccInt_left_step.

Theorem extensibella-$-stdLib-$-lesseq_integer__add_positive :
  forall N1 N2 Base Sum,
    $lesseq_integer Base N1 ->
    $lesseq_integer ($posInt $zero) N2 ->
    $plus_integer N1 N2 Sum -> $lesseq_integer Base Sum.
induction on 1. intros L1 L2 Plus.
apply $lesseq_integer_posInt to L2. case L1 (keep).
  %Subgoal 1:  B = 0, N1 = 0
   case Plus. search.
  %Subgoal 2:  B = 0, N1 = posInt (succ N3)
   case Plus. search.
  %Subgoal 3:  B = posInt (succ N3), N1 = posInt (succ N4)
   case Plus. apply IH to H1 L2 H2. search.
  %Subgoal 4:  B = negSuccInt N3, N1 = posInt N4
   Pos: assert exists Sum', Sum = $posInt Sum'.
     case Plus. search. search.
   case Pos. search.
  %Subgoal 5:  B = negSuccInt 0, N1 = negSuccInt 0
   case L2.
     %Subgoal 5.1:  N2 = 0
      case Plus. search.
     %Subgoal 5.2
      case Plus. search.
  %Subgoal 6:  B = negSuccInt (succ N3), N1 = negSuccInt 0
   case L2.
     %Subgoal 6.1:  N2 = posInt 0
      case Plus. search.
     %Subgoal 6.2:  N2 = posInt (succ N4)
      case Plus. search.
  %Subgoal 7:  B = negSuccInt (succ N3), N1 = negSuccInt (succ N4)
   case Plus (keep).
     %Subgoal 7.1:  N2 = posInt 0
      search.
     %Subgoal 7.2:  N2 = posInt (succ N6)
      L': assert $lesseq_integer ($posInt $zero) ($posInt N6).
             case L2 (keep). case H2. search. search. search.
      apply IH to H1 L' H2. backchain $lesseq_negSuccInt_left_step.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                              GREATER                               %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Define $greater_integer : $lib__integer -> $lib__integer -> prop by
  $greater_integer N1 N2 := $less_integer N2 N1.

Theorem $greater_true_flip_less_integer : forall N1 N2,
  $greater_integer N1 N2 -> $less_integer N1 N2 -> false.
induction on 2. intros G L. L': case L.
  %Subgoal 1
   G': case G. case G'.
  %Subgoal 2
   G': case G. case G'. apply IH to _ L'.
  %Subgoal 3
   G': case G. case G'.
  %Subgoal 4
   G': case G. case G'.
  %Subgoal 5
   G': case G. case G'. apply IH to _ L'.

Theorem extensibella-$-stdLib-$-greater_integer__add_positive :
  forall N1 N2 Base Sum,
    $greater_integer N1 Base ->
    $lesseq_integer ($posInt $zero) N2 ->
    $plus_integer N1 N2 Sum -> $greater_integer Sum Base.
intros G L Plus. case G.
apply extensibella-$-stdLib-$-less_integer__add_positive to H1 L Plus.
search.

Theorem extensibella-$-stdLib-$-greater_integer_transitive :
  forall A B C,
    $greater_integer A B -> $greater_integer B C ->
    $greater_integer A C.
intros GAB GBC. LBA: case GAB. LCB: case GBC.
apply extensibella-$-stdLib-$-less_integer_transitive to LCB LBA.
search.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                             GREATEREQ                              %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Define $greatereq_integer : $lib__integer -> $lib__integer -> prop by
  $greatereq_integer N1 N2 := $lesseq_integer N2 N1.

Theorem extensibella-$-stdLib-$-greatereq_integer__add_positive :
  forall N1 N2 Base Sum,
    $greatereq_integer N1 Base ->
    $greatereq_integer N2 ($posInt $zero) ->
    $plus_integer N1 N2 Sum -> $greatereq_integer Sum Base.
intros G1 G2 Plus. case G1. case G2.
apply extensibella-$-stdLib-$-lesseq_integer__add_positive to
  H1 H2 Plus. search.

Theorem extensibella-$-stdLib-$-greatereq_integer_transitive :
  forall A B C,
    $greatereq_integer A B -> $greatereq_integer B C ->
    $greatereq_integer A C.
intros GAB GBC. LBA: case GAB. LCB: case GBC.
apply extensibella-$-stdLib-$-lesseq_integer_transitive to LCB LBA.
search.


%combinations of <, <=, >, >= and addition, subtraction, multiplication, division, whatever

