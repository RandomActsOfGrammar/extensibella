Kind $lib__nat   type.
Import "integer_comparison".

/*
  Lists are one of the few things actually built into Abella, so we
  don't need to define them.  However, we will want to have some
  relations over them and properties of these relations.
*/

Define is_list : (A -> prop) -> list A -> prop by
  is_list IsA nil;
  is_list IsA (H::T) := IsA H /\ is_list IsA T.


Define $append : list A -> list A -> list A -> prop by
  $append nil L L;
  $append (H::T) L2 (H::L3) := $append T L2 L3.


Theorem extensibella-$-stdLib-$-append_nil_right[A] : forall (L L' : list A),
  $append L nil L' -> L = L'.
induction on 1. intros. case H1.
  %Subgoal 1
   search.
  %Subgoal 2
   apply IH to H2. search.

Theorem extensibella-$-stdLib-$-append_nil_left[A] : forall (L L' : list A),
  $append nil L L' -> L = L'.
intros. case H1. search.

Theorem extensibella-$-stdLib-$-append_unique[A] : forall (L1 L2 L3 L3' : list A),
  $append L1 L2 L3 ->
  $append L1 L2 L3' -> L3 = L3'.
induction on 1. intros. case H1.
  %Subgoal 1
   case H2. search.
  %Subgoal 2
   case H2. apply IH to H3 H4. search.

Theorem extensibella-$-stdLib-$-append_anything[A] : forall (L1 L2 L L3 : list A),
  $append L1 L2 L ->
  exists L', $append L1 L3 L'.
induction on 1. intros. case H1.
  %Subgoal 1
   search.
  %Subgoal 2
   apply IH to H2 with L3 = L3. search.

%Proof and theorem statement taken from
%   http://abella-prover.org/examples/first-order/lists.html
% (L1 ++ L2) ++ L3  =>  L1 ++ (L2 ++ L3) is equal
Theorem extensibella-$-stdLib-$-append_associative[A] : forall (L1 L2 L3 L12 L123 : list A),
  $append L1 L2 L12 -> $append L12 L3 L123 ->
  exists L23, $append L2 L3 L23 /\ $append L1 L23 L123.
induction on 1. intros. case H1.
  search.
  case H2. apply IH to H3 H4. search.

% L1 ++ (L2 ++ L3)  =>  (L1 ++ L2) ++ L3 is equal
Theorem extensibella-$-stdLib-$-append_associative_back[A] :
  forall (L1 L2 L3 L23 L123 : list A),
    $append L2 L3 L23 -> $append L1 L23 L123 ->
    exists L12, $append L1 L2 L12 /\ $append L12 L3 L123.
induction on 2. intros. case H2.
  search.
  apply IH to H1 H3. search.




Define extensibella-$-stdLib-$-length : list A -> $lib__integer -> prop by
  extensibella-$-stdLib-$-length nil ($posInt $zero);
  extensibella-$-stdLib-$-length (A::Rest) N :=
    exists N', extensibella-$-stdLib-$-length Rest N' /\
               $plus_integer ($posInt ($succ $zero)) N' N.

Theorem extensibella-$-stdLib-$-length_is[A] : forall (L : list A) N,
  extensibella-$-stdLib-$-length L N -> is_integer N.
induction on 1. intros L. L: case L.
  %nil
   search.
  %cons
   apply IH to L.
   apply extensibella-$-stdLib-$-plus_integer_is_integer to _ _ L1. search.

Theorem extensibella-$-stdLib-$-length_unique[A] : forall (L : list A) N1 N2,
  extensibella-$-stdLib-$-length L N1 ->
  extensibella-$-stdLib-$-length L N2 -> N1 = N2.
induction on 1. intros LA LB. LA: case LA.
  %nil
   case LB. search.
  %cons
   LB: case LB. apply IH to LA LB.
   apply extensibella-$-stdLib-$-plus_integer_unique to LA1 LB1. search.

%lemma
Theorem $greater+1 : forall N N',
  is_integer N -> $greater_integer N ($posInt $zero) ->
  $plus_integer ($posInt ($succ $zero)) N N' ->
  $greater_integer N' ($posInt $zero).
intros IsN G P. P': apply extensibella-$-stdLib-$-plus_integer_comm to _ _ P.
apply extensibella-$-stdLib-$-greater_integer__add_positive to G _ P'. search.

Theorem extensibella-$-stdLib-$-cons_length[A] : forall H (T : list A) N,
  extensibella-$-stdLib-$-length (H::T) N -> $greater_integer N ($posInt $zero).
induction on 1. intros L. L: case L. L': case L (keep).
  %T = nil
   case L1. case H1. search.
  %T = cons
   G: apply IH to L. IsN': apply extensibella-$-stdLib-$-length_is to L.
   backchain $greater+1.

Theorem extensibella-$-stdLib-$-length_cons[A] : forall (L : list A) N,
  extensibella-$-stdLib-$-length L N -> $greater_integer N ($posInt $zero) ->
  exists H T, L = H::T.
induction on 1. intros L G. L: case L.
  %nil
   G: case G. case G.
  %cons
   search.

Theorem extensibella-$-stdLib-$-length_geq_0[A] : forall (L : list A) N,
  extensibella-$-stdLib-$-length L N -> $greatereq_integer N ($posInt $zero).
induction on 1. intros L. L: case L.
  %nil
   search.
  %cons
   G: apply IH to L.
   apply extensibella-$-stdLib-$-greatereq_integer__add_positive to _ G L1.
   search.

Theorem extensibella-$-stdLib-$-append_length[A] :
  forall (L1 L2 L : list A) N1 N2 N,
    $append L1 L2 L -> extensibella-$-stdLib-$-length L1 N1 ->
    extensibella-$-stdLib-$-length L2 N2 ->
    $plus_integer N1 N2 N -> extensibella-$-stdLib-$-length L N.
induction on 1. intros App Len1 Len2 P. App: case App.
  %nil
   case Len1. case P. search.
  %cons
   Len': case Len1. P': case Len'1.
     %2.1:  1 + N4 = N5
      case P'. P: case P.
        %2.1.1:  (N5 + 1) + N6 = (N7 + 1)
         apply IH to App Len' Len2 P. search.
        %2.1.2:  Len2 = -1
         G: apply extensibella-$-stdLib-$-length_geq_0 to Len2.
         L: case G. case L.
        %2.1.3:  Len2 < -1
         G: apply extensibella-$-stdLib-$-length_geq_0 to Len2.
         L: case G. case L.
     %2.2:  length T = -1
      G: apply extensibella-$-stdLib-$-length_geq_0 to Len'.
      L: case G. case L.
     %2.3:  length T < -1
      G: apply extensibella-$-stdLib-$-length_geq_0 to Len'.
      L: case G. case L.

Theorem extensibella-$-stdLib-$-append_neq_right[A] :
  forall (L2 L : list A) N,
    $append L L2 L -> extensibella-$-stdLib-$-length L2 N ->
    $greater_integer N ($posInt $zero) -> false.
induction on 1. intros App Len G. App: case App.
  %nil
   case Len. L: case G. case L.
  %cons
   apply IH to App Len G.
