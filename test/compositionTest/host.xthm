Module compositionTest:host.

Proj_Rel is_expr E, is_stmt S.

Ext_Ind forall E, is_expr E; forall S, is_stmt S
and %just to have something here
  is_expr_is : forall E,
    IsE : is_expr E ->
    is_expr E
  on IsE as IH_Is
also
  append_unique_here : forall L1 L2 (A B : list expr),
    AppA : L1 ++ L2 = A ->
    AppB : L1 ++ L2 = B ->
    A = B
  on AppA as IH_App.
%is_expr
 %num
  search.
 %plus
  apply IH to R1. apply IH to R2. search.
 %true
  search.
 %false
  search.
 %and
  apply IH to R1. apply IH to R2. search.
 %eq
  apply IH to R1. apply IH to R2. search.
 %stmtExpr
  apply IH1 to R1. apply IH to R2. search.
 %name
  search.
%is_stmt
 %noop
  search.
 %seq
  apply IH1 to R1. apply IH1 to R2. apply IH1 to R3. search.
 %seq5
  apply IH1 to R1. apply IH1 to R2. apply IH1 to R3. apply IH1 to R4.
  apply IH1 to R5. search.
 %assign
  apply IH to R2. search.
 %ifThenElse
  apply IH to R1. apply IH1 to R2. apply IH1 to R3. search.
 %while
  apply IH to R1. apply IH1 to R2. search.
%is_expr_is
 search. search. search. search. search. search. search. search.
%append_unique_here
 apply append_unique to AppA AppB. search.


Ext_Size evalExpr G E V G', evalStmt G S G'.
Proj_Rel evalExpr G E V G', evalStmt G S G'.

Ext_Ind forall G E V G', evalExpr G E V G' with IsE: is_expr E;
        forall G S G', evalStmt G S G'     with IsS: is_stmt S.
%evalExpr
 %E-Num
  search.
 %E-Plus
  Acc': case Acc (keep). LE_N2: apply ext_size_pos_evalExpr to R2.
  LE_N3: apply ext_size_pos_evalExpr to R3. OrN2: apply lt_left to R1 _ _.
  apply ext_size_is_int_evalExpr to R3. OrN3: apply lt_right to R1 _ _ _.
  Is: case IsE. Ev1: apply drop_ext_size_evalExpr to R2. LN2: case OrN2.
    %N2 < N
     A2: apply Acc' to _ LN2. apply IH2 to R2 A2 _.
     Ev: apply drop_ext_size_evalExpr to R2. LN3: case OrN3.
       %N3 < N
        A3: apply Acc' to _ LN3. apply IH2 to R3 A3 _. search.
       %N3 = N
        apply IH2 to R3 Acc _. search.
    %N2 = N
     apply IH2 to R2 Acc _. Ev: apply drop_ext_size_evalExpr to R2.
     LN3: case OrN3.
       %N3 < N
        A3: apply Acc' to _ LN3. apply IH2 to R3 A3 _. search.
       %N3 = N
        apply IH2 to R3 Acc _. search.
 %E-True
  search.
 %E-False
  search.
 %E-And-False1
  case IsE. apply IH2 to R1 Acc _. search.
 %E-And-False2
  Acc': case Acc (keep). LE_N2: apply ext_size_pos_evalExpr to R2.
  LE_N3: apply ext_size_pos_evalExpr to R3. OrN2: apply lt_left to R1 _ _.
  apply ext_size_is_int_evalExpr to R3. OrN3: apply lt_right to R1 _ _ _.
  Is: case IsE. Ev1: apply drop_ext_size_evalExpr to R2. LN2: case OrN2.
    %N2 < N
     A2: apply Acc' to _ LN2. apply IH2 to R2 A2 _.
     Ev: apply drop_ext_size_evalExpr to R2. LN3: case OrN3.
       %N3 < N
        A3: apply Acc' to _ LN3. apply IH2 to R3 A3 _. search.
       %N3 = N
        apply IH2 to R3 Acc _. search.
    %N2 = N
     apply IH2 to R2 Acc _. Ev: apply drop_ext_size_evalExpr to R2.
     LN3: case OrN3.
       %N3 < N
        A3: apply Acc' to _ LN3. apply IH2 to R3 A3 _. search.
       %N3 = N
        apply IH2 to R3 Acc _. search.
 %E-And-True
  Acc': case Acc (keep). LE_N2: apply ext_size_pos_evalExpr to R2.
  LE_N3: apply ext_size_pos_evalExpr to R3. OrN2: apply lt_left to R1 _ _.
  apply ext_size_is_int_evalExpr to R3. OrN3: apply lt_right to R1 _ _ _.
  Is: case IsE. Ev1: apply drop_ext_size_evalExpr to R2. LN2: case OrN2.
    %N2 < N
     A2: apply Acc' to _ LN2. apply IH2 to R2 A2 _.
     Ev: apply drop_ext_size_evalExpr to R2. LN3: case OrN3.
       %N3 < N
        A3: apply Acc' to _ LN3. apply IH2 to R3 A3 _. search.
       %N3 = N
        apply IH2 to R3 Acc _. search.
    %N2 = N
     apply IH2 to R2 Acc _. Ev: apply drop_ext_size_evalExpr to R2.
     LN3: case OrN3.
       %N3 < N
        A3: apply Acc' to _ LN3. apply IH2 to R3 A3 _. search.
       %N3 = N
        apply IH2 to R3 Acc _. search.
 %E-Eq-True
  Acc': case Acc (keep). LE_N2: apply ext_size_pos_evalExpr to R2.
  LE_N3: apply ext_size_pos_evalExpr to R3. OrN2: apply lt_left to R1 _ _.
  apply ext_size_is_int_evalExpr to R3. OrN3: apply lt_right to R1 _ _ _.
  Is: case IsE. Ev1: apply drop_ext_size_evalExpr to R2. LN2: case OrN2.
    %N2 < N
     A2: apply Acc' to _ LN2. apply IH2 to R2 A2 _.
     Ev: apply drop_ext_size_evalExpr to R2. LN3: case OrN3.
       %N3 < N
        A3: apply Acc' to _ LN3. apply IH2 to R3 A3 _. search.
       %N3 = N
        apply IH2 to R3 Acc _. search.
    %N2 = N
     apply IH2 to R2 Acc _. Ev: apply drop_ext_size_evalExpr to R2.
     LN3: case OrN3.
       %N3 < N
        A3: apply Acc' to _ LN3. apply IH2 to R3 A3 _. search.
       %N3 = N
        apply IH2 to R3 Acc _. search.
 %E-Eq-False
  Acc': case Acc (keep). LE_N2: apply ext_size_pos_evalExpr to R2.
  LE_N3: apply ext_size_pos_evalExpr to R3. OrN2: apply lt_left to R1 _ _.
  apply ext_size_is_int_evalExpr to R3. OrN3: apply lt_right to R1 _ _ _.
  Is: case IsE. Ev1: apply drop_ext_size_evalExpr to R2. LN2: case OrN2.
    %N2 < N
     A2: apply Acc' to _ LN2. apply IH2 to R2 A2 _.
     Ev: apply drop_ext_size_evalExpr to R2. LN3: case OrN3.
       %N3 < N
        A3: apply Acc' to _ LN3. apply IH2 to R3 A3 _. search.
       %N3 = N
        apply IH2 to R3 Acc _. search.
    %N2 = N
     apply IH2 to R2 Acc _. Ev: apply drop_ext_size_evalExpr to R2.
     LN3: case OrN3.
       %N3 < N
        A3: apply Acc' to _ LN3. apply IH2 to R3 A3 _. search.
       %N3 = N
        apply IH2 to R3 Acc _. search.
 %E-StmtExpr
  Acc': case Acc (keep). LE_N2: apply ext_size_pos_evalStmt to R2.
  LE_N3: apply ext_size_pos_evalExpr to R3. OrN2: apply lt_left to R1 _ _.
  apply ext_size_is_int_evalExpr to R3. OrN3: apply lt_right to R1 _ _ _.
  Is: case IsE. Ev1: apply drop_ext_size_evalStmt to R2. LN2: case OrN2.
    %N2 < N
     A2: apply Acc' to _ LN2. apply IH3 to R2 A2 _.
     Ev: apply drop_ext_size_evalStmt to R2. LN3: case OrN3.
       %N3 < N
        A3: apply Acc' to _ LN3. apply IH2 to R3 A3 _. search.
       %N3 = N
        apply IH2 to R3 Acc _. search.
    %N2 = N
     apply IH3 to R2 Acc _. Ev: apply drop_ext_size_evalStmt to R2.
     LN3: case OrN3.
       %N3 < N
        A3: apply Acc' to _ LN3. apply IH2 to R3 A3 _. search.
       %N3 = N
        apply IH2 to R3 Acc _. search.
 %E-Name
  search.
%evalStmt
 %E-Noop
  search.
 %E-Seq
  skip.
 %E-Seq5
  skip.
 %E-Assign
  case IsS. apply IH2 to R1 Acc _. search.
 %E-IfThenElse-True
  Acc': case Acc (keep). LE_N2: apply ext_size_pos_evalExpr to R2.
  LE_N3: apply ext_size_pos_evalStmt to R3. OrN2: apply lt_left to R1 _ _.
  apply ext_size_is_int_evalStmt to R3. OrN3: apply lt_right to R1 _ _ _.
  Is: case IsS. Ev1: apply drop_ext_size_evalExpr to R2. LN2: case OrN2.
    %N2 < N
     A2: apply Acc' to _ LN2. apply IH2 to R2 A2 _.
     Ev: apply drop_ext_size_evalExpr to R2. LN3: case OrN3.
       %N3 < N
        A3: apply Acc' to _ LN3. apply IH3 to R3 A3 _. search.
       %N3 = N
        apply IH3 to R3 Acc _. search.
    %N2 = N
     apply IH2 to R2 Acc _. Ev: apply drop_ext_size_evalExpr to R2.
     LN3: case OrN3.
       %N3 < N
        A3: apply Acc' to _ LN3. apply IH3 to R3 A3 _. search.
       %N3 = N
        apply IH3 to R3 Acc _. search.
 %E-IfThenElse-False
  Acc': case Acc (keep). LE_N2: apply ext_size_pos_evalExpr to R2.
  LE_N3: apply ext_size_pos_evalStmt to R3. OrN2: apply lt_left to R1 _ _.
  apply ext_size_is_int_evalStmt to R3. OrN3: apply lt_right to R1 _ _ _.
  Is: case IsS. Ev1: apply drop_ext_size_evalExpr to R2. LN2: case OrN2.
    %N2 < N
     A2: apply Acc' to _ LN2. apply IH2 to R2 A2 _.
     Ev: apply drop_ext_size_evalExpr to R2. LN3: case OrN3.
       %N3 < N
        A3: apply Acc' to _ LN3. apply IH3 to R3 A3 _. search.
       %N3 = N
        apply IH3 to R3 Acc _. search.
    %N2 = N
     apply IH2 to R2 Acc _. Ev: apply drop_ext_size_evalExpr to R2.
     LN3: case OrN3.
       %N3 < N
        A3: apply Acc' to _ LN3. apply IH3 to R3 A3 _. search.
       %N3 = N
        apply IH3 to R3 Acc _. search.
 %E-While-False
  case IsS. apply IH2 to R1 Acc _. search.
 %E-While-True
  skip.


Extensible_Theorem
  evalExpr_unique : forall G E VA VB GA GB,
    EvA : evalExpr G E VA GA ->
    EvB : evalExpr G E VB GB ->
    VA = VB /\ GA = GB
  on EvA *, EvB as IH_EB,
  evalStmt_unique : forall G S GA GB,
    EvA : evalStmt G S GA ->
    EvB : evalStmt G S GB ->
    GA = GB
  on EvA * as IH_S, EvB as IH_SB.
%evalExpr_unique
 %E-Num
  case EvB. search.
 %E-Plus
  EvB: case EvB (keep). apply IH to EvA1 EvB1. apply IH to EvA2 EvB2.
  apply plus_integer_unique to EvA3 EvB3. search.
 %E-True
  case EvB. search.
 %E-False
  case EvB. search.
 %E-And-False1
  EvB: case EvB.
    %E-And-False1
     apply IH to EvA1 EvB. search.
    %E-And-False2
     apply IH to EvA1 EvB.
    %E-And-True
     apply IH to EvA1 EvB.
 %E-And-False2
  EvB: case EvB.
    %E-And-False1
     apply IH to EvA1 EvB.
    %E-And-False2
     apply IH to EvA1 EvB. apply IH to EvA2 EvB1. search.
    %E-And-True
     apply IH to EvA1 EvB. apply IH to EvA2 EvB1.
 %E-And-True
  EvB: case EvB.
    %E-And-False1
     apply IH to EvA1 EvB.
    %E-And-False2
     apply IH to EvA1 EvB. apply IH to EvA2 EvB1.
    %E-And-True
     apply IH to EvA1 EvB. apply IH to EvA2 EvB1. search.
 %E-Eq-True
  EvB: case EvB (keep).
    %E-Eq-True
     apply IH to EvA1 EvB1. apply IH to EvA2 EvB2. search.
    %E-Eq-False
     apply IH to EvA1 EvB1. apply IH to EvA2 EvB2. apply EvB3 to _.
 %E-Eq-False
  EvB: case EvB (keep).
    %E-Eq-True
     apply IH to EvA1 EvB1. apply IH to EvA2 EvB2. apply EvA3 to _.
    %E-Eq-False
     apply IH to EvA1 EvB1. apply IH to EvA2 EvB2. search.
 %E-StmtExpr
  EvB: case EvB. apply IH_S to EvA1 EvB. apply IH to EvA2 EvB1.
  search.
 %E-Name
  EvB: case EvB. apply lookup_unique to EvA1 EvB. search.
%evalStmt_unique
 %E-Noop
  case EvB. search.
 %E-Seq
  EvB: case EvB. apply IH_S to EvA1 EvB. apply IH_S to EvA2 EvB1.
  apply IH_S to EvA3 EvB2. search.
 %E-Seq5
  EvB: case EvB (keep). apply IH_S to EvA1 EvB1.
  apply IH_S to EvA2 EvB2. apply IH_S to EvA3 EvB3.
  apply IH_S to EvA4 EvB4. apply IH_S to EvA5 EvB5. search.
 %E-Assign
  EvB: case EvB. apply IH to EvA1 EvB. search.
 %E-IfThenElse-True
  EvB: case EvB (keep).
    %E-IfThenElse-True
     apply IH to EvA1 EvB1. apply IH_S to EvA2 EvB2. search.
    %E-IfThenElse-False
     apply IH to EvA1 EvB1.
 %E-IfThenElse-False
  EvB: case EvB (keep).
    %E-IfThenElse-True
     apply IH to EvA1 EvB1.
    %E-IfThenElse-False
     apply IH to EvA1 EvB1. apply IH_S to EvA2 EvB2. search.
 %E-While-False
  EvB: case EvB (keep).
    %E-While-False
     apply IH to EvA1 EvB1. search.
    %E-While-True
     apply IH to EvA1 EvB1.
 %E-While-True
  EvB: case EvB (keep).
    %E-While-False
     apply IH to EvA1 EvB1.
    %E-While-True
     apply IH to EvA1 EvB1. apply IH_S to EvA2 EvB2.
     apply IH_S to EvA3 EvB3. search.


/*everything is exactly the same*/
Projection_Constraint evalExpr_forward : forall E E' G V G',
  |{expr}- E ~~> E' -> evalExpr G E' V G' -> evalExpr G E V G'.
Projection_Constraint evalExpr_back : forall E E' G V G',
  |{expr}- E ~~> E' -> evalExpr G E V G' -> evalExpr G E' V G'.

Projection_Constraint evalStmt_forward : forall S S' G G',
  |{stmt}- S ~~> S' -> evalStmt G S' G' -> evalStmt G S G'.
Projection_Constraint evalStmt_back : forall S S' G G',
  |{stmt}- S ~~> S' -> evalStmt G S G' -> evalStmt G S' G'.


Projection_Constraint expr_same : forall E EA EB,
  |{expr}- E ~~> EA -> |{expr}- E ~~> EB -> EA = EB.
Projection_Constraint stmt_same : forall S SA SB,
  |{stmt}- S ~~> SA -> |{stmt}- S ~~> SB -> SA = SB.


/*These are just for checking induction on R_ES and R_P work*/
Extensible_Theorem
  drop_ES_expr : forall G E V G' N,
    Ev : <evalExpr {ES}> G E V G' N ->
    evalExpr G E V G'
  on Ev,
  drop_ES_stmt : forall G S G' N,
    Ev : <evalStmt {ES}> G S G' N ->
    evalStmt G S G'
  on Ev.
%expr
 %E-Num
  search.
 %E-Plus
  apply IH to Ev2. apply IH to Ev3. search.
 %E-True
  search.
 %E-False
  search.
 %E-And-False1
  apply IH to Ev1. search.
 %E-And-False2
  apply IH to Ev2. apply IH to Ev3. search.
 %E-And-True
  apply IH to Ev2. apply IH to Ev3. search.
 %E-Eq-True
  apply IH to Ev2. apply IH to Ev3. search.
 %E-Eq-False
  apply IH to Ev2. apply IH to Ev3. search.
 %E-StmtExpr
  apply IH1 to Ev2. apply IH to Ev3. search.
 %E-Name
  search.
%stmt
 %E-Noop
  search.
 %E-Seq
  apply IH1 to Ev3. apply IH1 to Ev4. apply IH1 to Ev5. search.
 %E-Seq5
  apply IH1 to Ev5. apply IH1 to Ev6. apply IH1 to Ev7.
  apply IH1 to Ev8. apply IH1 to Ev9. search.
 %E-Assign
  apply IH to Ev1. search.
 %E-IfThenElse-True
  apply IH to Ev2. apply IH1 to Ev3. search.
 %E-IfThenElse-False
  apply IH to Ev2. apply IH1 to Ev3. search.
 %E-While-False
  apply IH to Ev1. search.
 %E-While-True
  apply IH to Ev3. apply IH1 to Ev4. apply IH1 to Ev5. search.
Extensible_Theorem
  drop_P_expr : forall G E V G',
    Ev : <evalExpr {P}> G E V G' ->
    evalExpr G E V G'
  on Ev,
  drop_P_stmt : forall G S G',
    Ev : <evalStmt {P}> G S G' ->
    evalStmt G S G'
  on Ev.
%expr
 %E-Num
  search.
 %E-Plus
  apply IH to Ev1. apply IH to Ev2. search.
 %E-True
  search.
 %E-False
  search.
 %E-And-False1
  apply IH to Ev1. search.
 %E-And-False2
  apply IH to Ev1. apply IH to Ev2. search.
 %E-And-True
  apply IH to Ev1. apply IH to Ev2. search.
 %E-Eq-True
  apply IH to Ev1. apply IH to Ev2. search.
 %E-Eq-False
  apply IH to Ev1. apply IH to Ev2. search.
 %E-StmtExpr
  apply IH1 to Ev1. apply IH to Ev2. search.
 %E-Name
  search.
%stmt
 %E-Noop
  search.
 %E-Seq
  apply IH1 to Ev1. apply IH1 to Ev2. apply IH1 to Ev3. search.
 %E-Seq5
  apply IH1 to Ev1. apply IH1 to Ev2. apply IH1 to Ev3.
  apply IH1 to Ev4. apply IH1 to Ev5. search.
 %E-Assign
  apply IH to Ev1. search.
 %E-IfThenElse-True
  apply IH to Ev1. apply IH1 to Ev2. search.
 %E-IfThenElse-False
  apply IH to Ev1. apply IH1 to Ev2. search.
 %E-While-False
  apply IH to Ev1. search.
 %E-While-True
  apply IH to Ev1. apply IH1 to Ev2. apply IH1 to Ev3. search.
