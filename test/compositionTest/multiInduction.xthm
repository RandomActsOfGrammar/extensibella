Module compositionTest:multiInduction.

Add_Proj_Rel compositionTest:host:is_expr,
             compositionTest:host:is_stmt.

Prove_Ext_Ind compositionTest:host:is_expr,
              compositionTest:host:is_stmt
     and_thms compositionTest:host:is_expr_is.
apply IH to R1. search.
%is_expr_is
 search.


Add_Ext_Size compositionTest:host:evalExpr,
             compositionTest:host:evalStmt.
Add_Proj_Rel compositionTest:host:evalExpr,
             compositionTest:host:evalStmt.

Prove_Ext_Ind compositionTest:host:evalExpr,
              compositionTest:host:evalStmt.
skip. skip.


Prove compositionTest:host:evalExpr_unique,
      compositionTest:host:evalStmt_unique.
%E-DoubleEval-End
 EvB: case EvB.
   %E-DoubleEval-End
    apply IH to EvA1 EvB. search.
   %E-DoubleEval-Step
    %this is the only thing we really care about here:  using the second IH
    apply IH_EB to EvA EvB. search.
%E-DoubleEval-Step
 apply IH to EvA1 EvB. search.


Prove_Constraint compositionTest:host:evalExpr_forward.
search.


Prove_Constraint compositionTest:host:evalExpr_back.
skip.


Prove_Constraint compositionTest:host:evalStmt_forward.


Prove_Constraint compositionTest:host:evalStmt_back.


Prove_Constraint compositionTest:host:expr_same.
case Hyp1. search.


Prove_Constraint compositionTest:host:stmt_same.


Prove compositionTest:host:drop_ES_expr,
      compositionTest:host:drop_ES_stmt.
apply IH to Ev2. search. apply IH to Ev2. search.
Prove compositionTest:host:drop_P_expr,
      compositionTest:host:drop_P_stmt.
apply IH to Ev1. apply IH to Ev3. search.
apply IH to Ev1. apply IH to Ev3. search.
