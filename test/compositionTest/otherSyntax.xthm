Module compositionTest:otherSyntax.

Add_Proj_Rel compositionTest:host:is_expr,
             compositionTest:host:is_stmt.

Prove_Ext_Ind compositionTest:host:is_expr,
              compositionTest:host:is_stmt
     and_thms compositionTest:host:is_expr_is.
%is_expr
 %double
  apply IH to R1. search.
 %triple
  apply IH to R1. search.
%is_stmt
 %seq2
  apply IH1 to R1. apply IH1 to R2. search.
%is_expr_is
 search. search.


Add_Ext_Size compositionTest:host:evalExpr,
             compositionTest:host:evalStmt.
Add_Proj_Rel compositionTest:host:evalExpr,
             compositionTest:host:evalStmt.

Prove_Ext_Ind compositionTest:host:evalExpr,
              compositionTest:host:evalStmt.
%E-Double
 unfold. exists Half = Half. exists plus E1 E1. Acc: case Acc.
 IsN2: apply ext_size_is_int_evalExpr to R2.
 L: apply lt_plus_one to R1 _. apply ext_size_pos_evalExpr to R2.
 A: apply Acc to _ L. case IsE. apply IH_E to R2 A _. split.
   %plus
    search.
   %eval_T E1
    search.
   %proj
    search.
   %plus eval
    skip. %different eval ctx, so not necessarily
%E-Triple
 unfold. exists plus (plus E1 E1) E1, Third, Double. split.
   %eval_T E1
    Acc: case Acc. Is: apply ext_size_is_int_evalExpr to R2.
    L: apply lt_plus_one to R1 _.
    apply ext_size_pos_evalExpr to R2. A: apply Acc to _ L.
    case IsE. apply IH_E to R2 A _. search.
   %plus
    search.
   %plus
    search.
   %proj
    search.
   %plus eval
    skip.
%E-Seq2
 unfold. exists seq S1 S2 noop. exists G'. Acc: case Acc.
 IsN2: apply ext_size_is_int_evalStmt to R3.
 IsN3: apply ext_size_is_int_evalStmt to R4.
 skip. %this is true, but I don't want to mess with it


Prove compositionTest:host:evalExpr_unique,
      compositionTest:host:evalStmt_unique.
%E-Double
 EvB: case EvB. apply IH to EvA1 EvB.
 apply plus_integer_unique to EvA2 EvB1. search.
%E-Triple
 EvB: case EvB. apply IH to EvA1 EvB.
 apply plus_integer_unique to EvA2 EvB1.
 apply plus_integer_unique to EvA3 EvB2. search.
%E-Seq2
 EvB: case EvB. apply IH_S to EvA1 EvB. apply IH_S to EvA2 EvB1.
 search.


Prove_Constraint compositionTest:host:evalExpr_forward.
skip. skip.

Prove_Constraint compositionTest:host:evalExpr_back.
skip. skip.

Prove_Constraint compositionTest:host:evalStmt_forward.
case Hyp1. case H3. search.

Prove_Constraint compositionTest:host:evalStmt_back.
case Hyp1. search.

Prove_Constraint compositionTest:host:expr_same.
case Hyp1. search.
case Hyp1. search.

Prove_Constraint compositionTest:host:stmt_same.
case Hyp1. search.


Prove compositionTest:host:drop_ES_expr,
      compositionTest:host:drop_ES_stmt.
apply IH to Ev2. search. apply IH to Ev2. search. apply IH1 to Ev3.
apply IH1 to Ev4. search.
Prove compositionTest:host:drop_P_expr,
      compositionTest:host:drop_P_stmt
%just for testing purposes
also
  length_unique : forall (L : list expr) LenA LenB,
    LenA : length L LenA ->
    LenB : length L LenB ->
    LenA = LenB
  on LenA.
apply IH to Ev1. apply IH to Ev4. search.
apply IH to Ev1. apply IH to Ev5. search.
apply IH1 to Ev1. apply IH1 to Ev2. apply IH1 to Ev4. search.
%length_unique
 apply length_unique to LenA LenB. search.
